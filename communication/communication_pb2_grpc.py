# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from communication import communication_pb2 as communication_dot_communication__pb2


class ClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewClient = channel.unary_unary(
                '/Client/NewClient',
                request_serializer=communication_dot_communication__pb2.ClientInformation.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.Ack.FromString,
                )
        self.Initialize = channel.stream_unary(
                '/Client/Initialize',
                request_serializer=communication_dot_communication__pb2.PublicParameter.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.Ack.FromString,
                )
        self.ReceiveContribution = channel.unary_unary(
                '/Client/ReceiveContribution',
                request_serializer=communication_dot_communication__pb2.Contribution.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.Ack.FromString,
                )
        self.ClientUpdate = channel.stream_stream(
                '/Client/ClientUpdate',
                request_serializer=communication_dot_communication__pb2.ModelWeight.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.ModelWeight.FromString,
                )
        self.Setup = channel.unary_unary(
                '/Client/Setup',
                request_serializer=communication_dot_communication__pb2.VoidMsg.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.Ack.FromString,
                )


class ClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Initialize(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveContribution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientUpdate(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Setup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewClient': grpc.unary_unary_rpc_method_handler(
                    servicer.NewClient,
                    request_deserializer=communication_dot_communication__pb2.ClientInformation.FromString,
                    response_serializer=communication_dot_communication__pb2.Ack.SerializeToString,
            ),
            'Initialize': grpc.stream_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=communication_dot_communication__pb2.PublicParameter.FromString,
                    response_serializer=communication_dot_communication__pb2.Ack.SerializeToString,
            ),
            'ReceiveContribution': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveContribution,
                    request_deserializer=communication_dot_communication__pb2.Contribution.FromString,
                    response_serializer=communication_dot_communication__pb2.Ack.SerializeToString,
            ),
            'ClientUpdate': grpc.stream_stream_rpc_method_handler(
                    servicer.ClientUpdate,
                    request_deserializer=communication_dot_communication__pb2.ModelWeight.FromString,
                    response_serializer=communication_dot_communication__pb2.ModelWeight.SerializeToString,
            ),
            'Setup': grpc.unary_unary_rpc_method_handler(
                    servicer.Setup,
                    request_deserializer=communication_dot_communication__pb2.VoidMsg.FromString,
                    response_serializer=communication_dot_communication__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Client', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Client(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Client/NewClient',
            communication_dot_communication__pb2.ClientInformation.SerializeToString,
            communication_dot_communication__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Initialize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Client/Initialize',
            communication_dot_communication__pb2.PublicParameter.SerializeToString,
            communication_dot_communication__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveContribution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Client/ReceiveContribution',
            communication_dot_communication__pb2.Contribution.SerializeToString,
            communication_dot_communication__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientUpdate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Client/ClientUpdate',
            communication_dot_communication__pb2.ModelWeight.SerializeToString,
            communication_dot_communication__pb2.ModelWeight.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Setup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Client/Setup',
            communication_dot_communication__pb2.VoidMsg.SerializeToString,
            communication_dot_communication__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/Server/RegisterClient',
                request_serializer=communication_dot_communication__pb2.ClientAddress.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.ClientInformation.FromString,
                )
        self.ReceiveClients = channel.unary_stream(
                '/Server/ReceiveClients',
                request_serializer=communication_dot_communication__pb2.VoidMsg.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.ClientInformation.FromString,
                )
        self.ForwardContributions = channel.stream_unary(
                '/Server/ForwardContributions',
                request_serializer=communication_dot_communication__pb2.Contribution.SerializeToString,
                response_deserializer=communication_dot_communication__pb2.Ack.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForwardContributions(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=communication_dot_communication__pb2.ClientAddress.FromString,
                    response_serializer=communication_dot_communication__pb2.ClientInformation.SerializeToString,
            ),
            'ReceiveClients': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveClients,
                    request_deserializer=communication_dot_communication__pb2.VoidMsg.FromString,
                    response_serializer=communication_dot_communication__pb2.ClientInformation.SerializeToString,
            ),
            'ForwardContributions': grpc.stream_unary_rpc_method_handler(
                    servicer.ForwardContributions,
                    request_deserializer=communication_dot_communication__pb2.Contribution.FromString,
                    response_serializer=communication_dot_communication__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server/RegisterClient',
            communication_dot_communication__pb2.ClientAddress.SerializeToString,
            communication_dot_communication__pb2.ClientInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Server/ReceiveClients',
            communication_dot_communication__pb2.VoidMsg.SerializeToString,
            communication_dot_communication__pb2.ClientInformation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForwardContributions(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Server/ForwardContributions',
            communication_dot_communication__pb2.Contribution.SerializeToString,
            communication_dot_communication__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
